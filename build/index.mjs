import{webcrypto as t}from"node:crypto";import r from"bcryptjs";const e="01234567".split("");async function o(r,e,o){const n=await t.subtle.digest("SHA-512",Buffer.from(`${r}${o}${e}`,"utf8"));return Buffer.from(n).toString("base64")}class n{constructor({secretPepper:t="",workFactor:r=10}={}){this.secretPepper=t,this.workFactor=r}async hash(n){const s=function(){const r=new Uint8Array(1);return t.getRandomValues(r),e[r[0]%e.length]}();return r.hash(await o(n,this.secretPepper,s),this.workFactor)}async compare(t,n){for(const s of function(t){const r=t.slice();for(let t=r.length-1;t>0;t-=1){const e=Math.floor(Math.random()*(t+1)),o=r[t];r[t]=r[e],r[e]=o}return r}(e)){if(await r.compare(await o(t,this.secretPepper,s),n))return!0}return!1}needsRegenerate(t){return r.getRounds(t)<this.workFactor}}export{n as Hasher};
